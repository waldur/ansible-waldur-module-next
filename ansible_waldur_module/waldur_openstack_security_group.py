#!/usr/bin/python
#
# THIS FILE IS AUTOGENERATED BY THE ANSIBLE MODULE GENERATOR - DO NOT EDIT
#
from ansible.module_utils.basic import AnsibleModule
from ansible_waldur_generator.plugins.facts.runner import FactsRunner
from waldur_api_client.api.openstack_security_groups import (
    openstack_security_groups_list,
)
from waldur_api_client.api.openstack_security_groups import (
    openstack_security_groups_retrieve,
)
from waldur_api_client.api.openstack_tenants import openstack_tenants_list
from waldur_api_client.api.openstack_tenants import openstack_tenants_retrieve
from waldur_api_client.api.projects import projects_list
from waldur_api_client.api.projects import projects_retrieve

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "OpenNode",
}

DOCUMENTATION = """
---
module: waldur_openstack_security_group
short_description: Get an existing security group.
version_added: '0.1'
description:
- Get an existing security group.
requirements:
- python = 3.11
- waldur-api-client
options:
  access_token:
    description: An access token.
    required: true
    type: str
    no_log: true
  api_url:
    description: Fully qualified URL to the API.
    required: true
    type: str
  name:
    type: str
    required: false
    description: The name or UUID of the security group.
  project:
    type: str
    required: false
    description: The name or UUID of the project.
  tenant:
    type: str
    required: false
"""

EXAMPLES = """
- name: Get a security group facts
  hosts: localhost
  tasks:
  - name: Get a security group
    waldur_openstack_security_group:
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com:8000/api
      name: Security_group Name or UUID
      project: Project Name or UUID
      tenant: some_value
"""

ARGUMENT_SPEC = {
    "access_token": {
        "description": "An access token.",
        "required": True,
        "type": "str",
        "no_log": True,
    },
    "api_url": {
        "description": "Fully qualified URL to the API.",
        "required": True,
        "type": "str",
    },
    "name": {"type": "str", "required": False},
    "project": {"type": "str", "required": False},
    "tenant": {"type": "str", "required": False},
}

RUNNER_CONTEXT = {
    "module_type": "facts",
    "resource_type": "security_group",
    "list_func": openstack_security_groups_list,
    "retrieve_func": openstack_security_groups_retrieve,
    "identifier_param": "name",
    "context_resolvers": {
        "project": {
            "list_func": projects_list,
            "retrieve_func": projects_retrieve,
            "error_message": "Project '{value}' not found.",
            "filter_key": "project_uuid",
        },
        "tenant": {
            "list_func": openstack_tenants_list,
            "retrieve_func": openstack_tenants_retrieve,
            "error_message": "Tenant '{value}' not found.",
            "filter_key": "tenant_uuid",
        },
    },
}


def main():
    module = AnsibleModule(
        argument_spec=ARGUMENT_SPEC,
        supports_check_mode=True,
    )
    runner = FactsRunner(module, RUNNER_CONTEXT)
    runner.run()


if __name__ == "__main__":
    main()
