#!/usr/bin/python
#
# THIS FILE IS AUTOGENERATED BY THE ANSIBLE MODULE GENERATOR - DO NOT EDIT
#
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.waldur.marketplace.plugins.module_utils.waldur.crud_runner import (
    CrudRunner,
)

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "OpenNode",
}

DOCUMENTATION = """
---
module: order
short_description: Manage order resources.
description: ''
author: Waldur Team
options:
  access_token:
    description: An access token.
    required: true
    type: str
    no_log: true
  api_url:
    description: Fully qualified URL to the API.
    required: true
    type: str
  state:
    description: Should the resource be present or absent.
    choices:
    - present
    - absent
    default: present
    type: str
  wait:
    description: A boolean value that defines whether to wait for the async action to complete.
    default: true
    type: bool
  timeout:
    description: The maximum number of seconds to wait for the async action to complete.
    default: 600
    type: int
  interval:
    description: The interval in seconds for polling the async action status.
    default: 20
    type: int
  name:
    description:
    - The name of the order.
    - This attribute cannot be updated.
    type: str
    required: true
  offering:
    type: str
    required: false
    description:
    - The name or UUID of the offering. Offering
    - Required when C(state) is 'present'.
    - This attribute cannot be updated.
  plan:
    type: str
    required: false
    description:
    - Plan
    - This attribute cannot be updated.
  attributes:
    type: str
    required: false
    description:
    - Attributes structure depends on the offering type specified in the parent object. Can also be a generic object for offerings without a specific attributes schema.
    - This attribute cannot be updated.
  limits:
    type: dict
    required: false
    description:
    - Limits
    - This attribute cannot be updated.
  accepting_terms_of_service:
    type: bool
    required: false
    description:
    - Accepting terms of service
    - This attribute cannot be updated.
  callback_url:
    type: str
    required: false
    description:
    - Callback url
    - This attribute cannot be updated.
  request_comment:
    type: str
    required: false
    description:
    - Request comment
    - This attribute cannot be updated.
  type:
    type: str
    required: false
    description:
    - Type
    - This attribute cannot be updated.
    choices:
    - Create
    - Update
    - Terminate
  start_date:
    type: str
    required: false
    description:
    - Enables delayed processing of resource provisioning order.
    - This attribute cannot be updated.
  project:
    type: str
    required: false
    description:
    - The name or UUID of the project. Project
    - Required when C(state) is 'present'.
    - This attribute cannot be updated.
requirements:
- python >= 3.11

"""

EXAMPLES = """
- name: Create a new order
  hosts: localhost
  tasks:
  - name: Add order
    waldur.marketplace.order:
      state: present
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com
      offering: Offering name or UUID
      plan: https://api.example.com/api/plan/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
      attributes: null
      limits: {}
      accepting_terms_of_service: true
      callback_url: https://api.example.com/api/callback-url/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
      request_comment: string-value
      type: null
      start_date: '2023-10-01'
      project: Project name or UUID
- name: Remove an existing order
  hosts: localhost
  tasks:
  - name: Remove order
    waldur.marketplace.order:
      state: absent
      name: My-Awesome-order
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com

"""

RETURN = """
resource:
  description: The state of the order after the operation.
  type: dict
  returned: on success
  contains:
    offering:
      description: Offering URL
      type: str
      returned: always
      sample: https://api.example.com/api/offering/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    offering_name:
      description: Offering name
      type: str
      returned: always
      sample: string-value
    offering_uuid:
      description: Offering UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    offering_description:
      description: Offering description
      type: str
      returned: always
      sample: string-value
    offering_image:
      description: Offering image URL
      type: str
      returned: always
      sample: https://api.example.com/api/offering-image/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    offering_thumbnail:
      description: Offering thumbnail URL
      type: str
      returned: always
      sample: https://api.example.com/api/offering-thumbnail/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    offering_type:
      description: Offering type
      type: str
      returned: always
      sample: string-value
    offering_shared:
      description: Accessible to all customers.
      type: bool
      returned: always
      sample: true
    offering_billable:
      description: Purchase and usage is invoiced.
      type: bool
      returned: always
      sample: true
    offering_plugin_options:
      description: Public data used by specific plugin, such as storage mode for OpenStack.
      type: str
      returned: always
      sample: null
    provider_name:
      description: Provider name
      type: str
      returned: always
      sample: string-value
    provider_uuid:
      description: Provider UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    provider_slug:
      description: Provider slug
      type: str
      returned: always
      sample: string-value
    category_title:
      description: Category title
      type: str
      returned: always
      sample: string-value
    category_uuid:
      description: Category UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    category_icon:
      description: Category icon URL
      type: str
      returned: always
      sample: https://api.example.com/api/category-icon/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    plan:
      description: Plan URL
      type: str
      returned: always
      sample: https://api.example.com/api/plan/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    plan_unit:
      description: Plan unit
      type: str
      returned: always
      sample: null
    plan_name:
      description: Plan name
      type: str
      returned: always
      sample: string-value
    plan_uuid:
      description: Plan UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    plan_description:
      description: Plan description
      type: str
      returned: always
      sample: string-value
    attributes:
      description: Attributes
      type: str
      returned: always
      sample: null
    limits:
      description: Limits
      type: dict
      returned: always
      sample: {}
    uuid:
      description: UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    created:
      description: Created
      type: str
      returned: always
      sample: '2023-10-01T12:00:00Z'
    modified:
      description: Modified
      type: str
      returned: always
      sample: '2023-10-01T12:00:00Z'
    resource_uuid:
      description: Resource UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    resource_type:
      description: Resource type
      type: str
      returned: always
      sample: string-value
    resource_name:
      description: Resource name
      type: str
      returned: always
      sample: string-value
    cost:
      description: Cost
      type: str
      returned: always
      sample: '12.34'
    state:
      description: State
      type: str
      returned: always
      sample: OK
    output:
      description: Output
      type: str
      returned: always
      sample: string-value
    marketplace_resource_uuid:
      description: Marketplace resource UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    error_message:
      description: Error message
      type: str
      returned: always
      sample: string-value
    error_traceback:
      description: Error traceback
      type: str
      returned: always
      sample: string-value
    callback_url:
      description: Callback URL URL
      type: str
      returned: always
      sample: https://api.example.com/api/callback-url/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    completed_at:
      description: Completed at
      type: str
      returned: always
      sample: '2023-10-01T12:00:00Z'
    request_comment:
      description: Request comment
      type: str
      returned: always
      sample: string-value
    attachment:
      description: Attachment URL
      type: str
      returned: always
      sample: https://api.example.com/api/attachment/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    type:
      description: Type
      type: str
      returned: always
      sample: null
    start_date:
      description: Enables delayed processing of resource provisioning order.
      type: str
      returned: always
      sample: '2023-10-01'
    url:
      description: URL URL
      type: str
      returned: always
      sample: https://api.example.com/api/url/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    created_by:
      description: Created by URL
      type: str
      returned: always
      sample: https://api.example.com/api/users/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    created_by_username:
      description: Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters
      type: str
      returned: always
      sample: string-value
    created_by_full_name:
      description: Created by full name
      type: str
      returned: always
      sample: string-value
    consumer_reviewed_by:
      description: Consumer reviewed by URL
      type: str
      returned: always
      sample: https://api.example.com/api/users/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    consumer_reviewed_at:
      description: Consumer reviewed at
      type: str
      returned: always
      sample: '2023-10-01T12:00:00Z'
    consumer_reviewed_by_username:
      description: Required. 128 characters or fewer. Lowercase letters, numbers and @/./+/-/_ characters
      type: str
      returned: always
      sample: string-value
    consumer_reviewed_by_full_name:
      description: Consumer reviewed by full name
      type: str
      returned: always
      sample: string-value
    project:
      description: Project URL
      type: str
      returned: always
      sample: https://api.example.com/api/project/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    project_uuid:
      description: Project UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    project_name:
      description: Project name
      type: str
      returned: always
      sample: Internal Research Project
    project_description:
      description: Project description
      type: str
      returned: always
      sample: string-value
    customer_name:
      description: Customer name
      type: str
      returned: always
      sample: Big Corp Inc.
    customer_uuid:
      description: Customer UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
commands:
  description: A list of HTTP requests that were made (or would be made in check mode) to execute the task.
  type: list
  returned: when changed
  elements: dict
  contains:
    method:
      description: The HTTP method used (e.g., POST, PATCH, DELETE).
      type: str
      sample: POST
    url:
      description: The fully qualified URL of the API endpoint.
      type: str
      sample: https://api.example.com/api/projects/
    description:
      description: A human-readable summary of the command's purpose.
      type: str
      sample: Create new project
    body:
      description: The JSON payload sent with the request. Only present for methods with a body.
      type: dict
      returned: if applicable
      sample:
        name: My-Awesome-Project

"""

ARGUMENT_SPEC = {
    "access_token": {"type": "str", "no_log": True, "required": True},
    "api_url": {"type": "str", "required": True},
    "state": {"type": "str", "choices": ["present", "absent"], "default": "present"},
    "wait": {"type": "bool", "default": True},
    "timeout": {"type": "int", "default": 600},
    "interval": {"type": "int", "default": 20},
    "name": {"type": "str", "required": True},
    "offering": {"type": "str"},
    "plan": {"type": "str"},
    "attributes": {"type": "str"},
    "limits": {"type": "dict"},
    "accepting_terms_of_service": {"type": "bool"},
    "callback_url": {"type": "str"},
    "request_comment": {"type": "str"},
    "type": {"type": "str", "choices": ["Create", "Update", "Terminate"]},
    "start_date": {"type": "str"},
    "project": {"type": "str"},
}

RUNNER_CONTEXT = {
    "resource_type": "order",
    "check_url": "/api/marketplace-orders/",
    "check_filter_keys": {},
    "list_path": "/api/marketplace-orders/",
    "create_path": "/api/marketplace-orders/",
    "destroy_path": "/api/marketplace-orders/{uuid}/",
    "update_path": None,
    "required_for_create": ["offering", "project"],
    "model_param_names": [
        "project",
        "offering",
        "accepting_terms_of_service",
        "attributes",
        "callback_url",
        "limits",
        "plan",
        "request_comment",
        "start_date",
        "type",
    ],
    "path_param_maps": {},
    "update_fields": [],
    "update_actions": {},
    "resolvers": {
        "customer": {"url": "/api/customers/", "error_message": None, "filter_by": []},
        "project": {"url": "/api/projects/", "error_message": None, "filter_by": []},
        "offering": {
            "url": "/api/marketplace-public-offerings/",
            "error_message": None,
            "filter_by": [],
        },
    },
    "resolver_order": ["customer", "project", "offering"],
    "resource_detail_path": "/api/marketplace-orders/{uuid}/",
}


def main():
    """Main execution entrypoint for the Ansible module."""
    module = AnsibleModule(
        argument_spec=ARGUMENT_SPEC,
        supports_check_mode=True,
    )
    runner = CrudRunner(module, RUNNER_CONTEXT)
    runner.run()


if __name__ == "__main__":
    main()
