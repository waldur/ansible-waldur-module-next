#!/usr/bin/python
#
# THIS FILE IS AUTOGENERATED BY THE ANSIBLE MODULE GENERATOR - DO NOT EDIT
#
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.waldur.openstack.plugins.module_utils.waldur.actions_runner import (
    ActionsRunner,
)

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "OpenNode",
}

DOCUMENTATION = """
---
module: vpc_action
short_description: Perform actions on OpenStack tenant.
description: ''
author: Waldur Team
options:
  access_token:
    description: An access token.
    required: true
    type: str
    no_log: true
  api_url:
    description: Fully qualified URL to the API.
    required: true
    type: str
  name:
    description: The name or UUID of the OpenStack tenant to perform an action on.
    type: str
    required: true
  action:
    description: The action to perform on the resource.
    type: str
    required: true
    choices:
    - pull
    - unlink
  project:
    description: The name or UUID of the project to filter resources by.
    type: str
    required: false
  customer:
    description: The name or UUID of the customer to filter resources by.
    type: str
    required: false
requirements:
- python >= 3.11

"""

EXAMPLES = """
- name: Perform 'pull' action on a OpenStack tenant
  hosts: localhost
  tasks:
  - name: Trigger pull
    waldur.openstack.vpc_action:
      name: My-Target-OpenStack-tenant
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com
      project: Parent Project Name or UUID
      customer: Parent Customer Name or UUID
      action: pull
- name: Perform 'unlink' action on a OpenStack tenant
  hosts: localhost
  tasks:
  - name: Trigger unlink
    waldur.openstack.vpc_action:
      name: My-Target-OpenStack-tenant
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com
      project: Parent Project Name or UUID
      customer: Parent Customer Name or UUID
      action: unlink

"""

RETURN = """
resource:
  description: A dictionary describing the OpenStack tenant after the action was performed.
  type: dict
  returned: on success
  contains:
    url:
      description: URL URL
      type: str
      returned: always
      sample: https://api.example.com/api/url/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    uuid:
      description: UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    name:
      description: Name
      type: str
      returned: always
      sample: My-Awesome-OpenStack-tenant
    description:
      description: Description
      type: str
      returned: always
      sample: A sample description created by Ansible.
    service_name:
      description: Service name
      type: str
      returned: always
      sample: string-value
    service_settings:
      description: Service settings URL
      type: str
      returned: always
      sample: https://api.example.com/api/service-settings/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    service_settings_uuid:
      description: Service settings UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    service_settings_state:
      description: Service settings state
      type: str
      returned: always
      sample: string-value
    service_settings_error_message:
      description: Service settings error message
      type: str
      returned: always
      sample: string-value
    project:
      description: Project URL
      type: str
      returned: always
      sample: https://api.example.com/api/project/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    project_name:
      description: Project name
      type: str
      returned: always
      sample: Internal Research Project
    project_uuid:
      description: Project UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    customer:
      description: Customer URL
      type: str
      returned: always
      sample: https://api.example.com/api/customer/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    customer_name:
      description: Customer name
      type: str
      returned: always
      sample: Big Corp Inc.
    customer_native_name:
      description: Customer native name
      type: str
      returned: always
      sample: string-value
    customer_abbreviation:
      description: Customer abbreviation
      type: str
      returned: always
      sample: string-value
    error_message:
      description: Error message
      type: str
      returned: always
      sample: string-value
    error_traceback:
      description: Error traceback
      type: str
      returned: always
      sample: string-value
    resource_type:
      description: Resource type
      type: str
      returned: always
      sample: string-value
    state:
      description: State
      type: str
      returned: always
      sample: OK
    created:
      description: Created
      type: str
      returned: always
      sample: '2023-10-01T12:00:00Z'
    modified:
      description: Modified
      type: str
      returned: always
      sample: '2023-10-01T12:00:00Z'
    backend_id:
      description: ID of tenant in the OpenStack backend
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    access_url:
      description: Access URL
      type: str
      returned: always
      sample: string-value
    availability_zone:
      description: Optional availability group. Will be used for all instances provisioned in this tenant
      type: str
      returned: always
      sample: string-value
    internal_network_id:
      description: ID of internal network in OpenStack tenant
      type: str
      returned: always
      sample: string-value
    external_network_id:
      description: ID of external network connected to OpenStack tenant
      type: str
      returned: always
      sample: string-value
    user_username:
      description: Username of the tenant user
      type: str
      returned: always
      sample: string-value
    user_password:
      description: Password of the tenant user
      type: str
      returned: always
      sample: '********'
    quotas:
      description: A list of quotas items.
      type: list
      returned: always
      sample: []
      contains:
        name:
          description: Name
          type: str
          returned: always
          sample: My-Awesome-OpenStack-tenant
        usage:
          description: Usage
          type: int
          returned: always
          sample: 123
        limit:
          description: Limit
          type: int
          returned: always
          sample: 123
    default_volume_type_name:
      description: Volume type name to use when creating volumes.
      type: str
      returned: always
      sample: string-value
    marketplace_offering_uuid:
      description: Marketplace offering UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_offering_name:
      description: Marketplace offering name
      type: str
      returned: always
      sample: string-value
    marketplace_offering_plugin_options:
      description: Marketplace offering plugin options
      type: dict
      returned: always
      sample: {}
    marketplace_category_uuid:
      description: Marketplace category UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_category_name:
      description: Marketplace category name
      type: str
      returned: always
      sample: string-value
    marketplace_resource_uuid:
      description: Marketplace resource UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_plan_uuid:
      description: Marketplace plan UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_resource_state:
      description: Marketplace resource state
      type: str
      returned: always
      sample: string-value
    is_usage_based:
      description: Is usage based
      type: bool
      returned: always
      sample: true
    is_limit_based:
      description: Is limit based
      type: bool
      returned: always
      sample: true
commands:
  description: A list of HTTP requests that were made (or would be made in check mode) to execute the task.
  type: list
  returned: when changed
  elements: dict
  contains:
    method:
      description: The HTTP method used (e.g., POST, PATCH, DELETE).
      type: str
      sample: POST
    url:
      description: The fully qualified URL of the API endpoint.
      type: str
      sample: https://api.example.com/api/projects/
    description:
      description: A human-readable summary of the command's purpose.
      type: str
      sample: Create new project
    body:
      description: The JSON payload sent with the request. Only present for methods with a body.
      type: dict
      returned: if applicable
      sample:
        name: My-Awesome-Project

"""

ARGUMENT_SPEC = {
    "access_token": {"type": "str", "no_log": True, "required": True},
    "api_url": {"type": "str", "required": True},
    "name": {"type": "str", "required": True},
    "action": {"type": "str", "choices": ["pull", "unlink"], "required": True},
    "project": {"type": "str"},
    "customer": {"type": "str"},
}

RUNNER_CONTEXT = {
    "resource_type": "OpenStack tenant",
    "check_url": "/api/openstack-tenants/",
    "retrieve_url": "/api/openstack-tenants/{uuid}/",
    "identifier_param": "name",
    "resolvers": {
        "project": {
            "url": "/api/projects/",
            "error_message": "Project '{value}' not found.",
            "filter_key": "project_uuid",
        },
        "customer": {
            "url": "/api/customers/",
            "error_message": "Customer '{value}' not found.",
            "filter_key": "customer_uuid",
        },
    },
    "actions": {
        "pull": "/api/openstack-tenants/{uuid}/pull/",
        "unlink": "/api/openstack-tenants/{uuid}/unlink/",
    },
}


def main():
    """Main execution entrypoint for the Ansible module."""
    module = AnsibleModule(
        argument_spec=ARGUMENT_SPEC,
        supports_check_mode=True,
    )
    runner = ActionsRunner(module, RUNNER_CONTEXT)
    runner.run()


if __name__ == "__main__":
    main()
