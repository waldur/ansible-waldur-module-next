#!/usr/bin/python
#
# THIS FILE IS AUTOGENERATED BY THE ANSIBLE MODULE GENERATOR - DO NOT EDIT
#
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.waldur.openstack.plugins.module_utils.waldur.crud_runner import (
    CrudRunner,
)

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "OpenNode",
}

DOCUMENTATION = """
---
module: subnet
short_description: Manage OpenStack subnets in Waldur.
description: 'When the resource already exists, the following fields can be updated: allocation_pools, cidr, description, disable_gateway, dns_nameservers, gateway_ip, host_routes, name.'
author: Waldur Team
options:
  access_token:
    description: An access token.
    required: true
    type: str
    no_log: true
  api_url:
    description: Fully qualified URL to the API.
    required: true
    type: str
  state:
    description: Should the resource be present or absent.
    choices:
    - present
    - absent
    default: present
    type: str
  wait:
    description: A boolean value that defines whether to wait for the async action to complete.
    default: true
    type: bool
  timeout:
    description: The maximum number of seconds to wait for the async action to complete.
    default: 600
    type: int
  interval:
    description: The interval in seconds for polling the async action status.
    default: 20
    type: int
  name:
    description: The name of the OpenStack subnet.
    type: str
    required: true
  network:
    type: str
    required: true
    description: The parent network name or UUID.
  tenant:
    description: The name or UUID of the parent tenant for filtering.
    type: str
    required: true
  customer:
    description: The name or UUID of the parent customer for filtering.
    type: str
    required: true
  project:
    description: The name or UUID of the parent project for filtering.
    type: str
    required: true
  description:
    type: str
    required: false
    description: Description
  cidr:
    type: str
    required: false
    description: Cidr
  gateway_ip:
    type: str
    required: false
    description: IP address of the gateway for this subnet
  disable_gateway:
    type: bool
    required: false
    description: If True, no gateway IP address will be allocated
  allocation_pools:
    type: list
    required: false
    description: Allocation pools
  dns_nameservers:
    type: list
    required: false
    description: Dns nameservers
  host_routes:
    type: list
    required: false
    description: Host routes
requirements:
- python >= 3.11

"""

EXAMPLES = """
- name: Create a new OpenStack subnet
  hosts: localhost
  tasks:
  - name: Add OpenStack subnet
    waldur.openstack.subnet:
      state: present
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com
      network: Network name or UUID
      name: My-Awesome-OpenStack-subnet
      description: A sample description created by Ansible.
      cidr: 192.168.1.0/24
      gateway_ip: 192.168.1.1
      disable_gateway: 192.168.1.1
      allocation_pools:
      - start: null
        end: null
      dns_nameservers:
      - null
      host_routes:
      - destination: string-value
        nexthop: null
- name: Remove an existing OpenStack subnet
  hosts: localhost
  tasks:
  - name: Remove OpenStack subnet
    waldur.openstack.subnet:
      state: absent
      name: My-Awesome-OpenStack-subnet
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com
      network: Network name or UUID

"""

RETURN = """
resource:
  description: The state of the OpenStack subnet after the operation.
  type: dict
  returned: on success
  contains:
    url:
      description: URL URL
      type: str
      returned: always
      sample: https://api.example.com/api/url/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    uuid:
      description: UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    name:
      description: Name
      type: str
      returned: always
      sample: My-Awesome-Resource
    description:
      description: Description
      type: str
      returned: always
      sample: A sample description created by Ansible.
    service_name:
      description: Service name
      type: str
      returned: always
      sample: string-value
    service_settings:
      description: Service settings URL
      type: str
      returned: always
      sample: https://api.example.com/api/service-settings/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    service_settings_uuid:
      description: Service settings UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    service_settings_state:
      description: Service settings state
      type: str
      returned: always
      sample: string-value
    service_settings_error_message:
      description: Service settings error message
      type: str
      returned: always
      sample: string-value
    project:
      description: Project URL
      type: str
      returned: always
      sample: https://api.example.com/api/project/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    project_name:
      description: Project name
      type: str
      returned: always
      sample: Internal Research Project
    project_uuid:
      description: Project UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    customer:
      description: Customer URL
      type: str
      returned: always
      sample: https://api.example.com/api/customer/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    customer_name:
      description: Customer name
      type: str
      returned: always
      sample: Big Corp Inc.
    customer_native_name:
      description: Customer native name
      type: str
      returned: always
      sample: string-value
    customer_abbreviation:
      description: Customer abbreviation
      type: str
      returned: always
      sample: string-value
    error_message:
      description: Error message
      type: str
      returned: always
      sample: string-value
    error_traceback:
      description: Error traceback
      type: str
      returned: always
      sample: string-value
    resource_type:
      description: Resource type
      type: str
      returned: always
      sample: string-value
    state:
      description: State
      type: str
      returned: always
      sample: OK
    created:
      description: Created
      type: str
      returned: always
      sample: '2023-10-01T12:00:00Z'
    modified:
      description: Modified
      type: str
      returned: always
      sample: '2023-10-01T12:00:00Z'
    backend_id:
      description: Backend ID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    access_url:
      description: Access URL
      type: str
      returned: always
      sample: string-value
    tenant:
      description: Tenant URL
      type: str
      returned: always
      sample: https://api.example.com/api/tenant/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    tenant_name:
      description: Tenant name
      type: str
      returned: always
      sample: string-value
    network:
      description: Network to which this subnet belongs
      type: str
      returned: always
      sample: https://api.example.com/api/network/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    network_name:
      description: Network name
      type: str
      returned: always
      sample: string-value
    cidr:
      description: CIDR
      type: str
      returned: always
      sample: 192.168.1.0/24
    gateway_ip:
      description: IP address of the gateway for this subnet
      type: str
      returned: always
      sample: 192.168.1.1
    disable_gateway:
      description: If True, no gateway IP address will be allocated
      type: bool
      returned: always
      sample: 192.168.1.1
    allocation_pools:
      description: A list of allocation pools items.
      type: list
      returned: always
      sample: []
      contains:
        start:
          description: An IPv4 or IPv6 address.
          type: str
          returned: always
          sample: null
        end:
          description: An IPv4 or IPv6 address.
          type: str
          returned: always
          sample: null
    ip_version:
      description: IP protocol version (4 or 6)
      type: int
      returned: always
      sample: 123
    enable_dhcp:
      description: If True, DHCP service will be enabled on this subnet
      type: bool
      returned: always
      sample: true
    dns_nameservers:
      description: A list of DNS nameservers items.
      type: list
      returned: always
      sample: []
    host_routes:
      description: A list of host routes items.
      type: list
      returned: always
      sample: []
      contains:
        destination:
          description: Destination
          type: str
          returned: always
          sample: string-value
        nexthop:
          description: An IPv4 or IPv6 address.
          type: str
          returned: always
          sample: null
    is_connected:
      description: Is subnet connected to the default tenant router.
      type: bool
      returned: always
      sample: true
    marketplace_offering_uuid:
      description: Marketplace offering UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_offering_name:
      description: Marketplace offering name
      type: str
      returned: always
      sample: string-value
    marketplace_offering_plugin_options:
      description: Marketplace offering plugin options
      type: dict
      returned: always
      sample: {}
    marketplace_category_uuid:
      description: Marketplace category UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_category_name:
      description: Marketplace category name
      type: str
      returned: always
      sample: string-value
    marketplace_resource_uuid:
      description: Marketplace resource UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_plan_uuid:
      description: Marketplace plan UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_resource_state:
      description: Marketplace resource state
      type: str
      returned: always
      sample: string-value
    is_usage_based:
      description: Is usage based
      type: bool
      returned: always
      sample: true
    is_limit_based:
      description: Is limit based
      type: bool
      returned: always
      sample: true
commands:
  description: A list of HTTP requests that were made (or would be made in check mode) to execute the task.
  type: list
  returned: when changed
  elements: dict
  contains:
    method:
      description: The HTTP method used (e.g., POST, PATCH, DELETE).
      type: str
      sample: POST
    url:
      description: The fully qualified URL of the API endpoint.
      type: str
      sample: https://api.example.com/api/projects/
    description:
      description: A human-readable summary of the command's purpose.
      type: str
      sample: Create new project
    body:
      description: The JSON payload sent with the request. Only present for methods with a body.
      type: dict
      returned: if applicable
      sample:
        name: My-Awesome-Project

"""

ARGUMENT_SPEC = {
    "access_token": {"type": "str", "no_log": True, "required": True},
    "api_url": {"type": "str", "required": True},
    "state": {"type": "str", "choices": ["present", "absent"], "default": "present"},
    "wait": {"type": "bool", "default": True},
    "timeout": {"type": "int", "default": 600},
    "interval": {"type": "int", "default": 20},
    "name": {"type": "str", "required": True},
    "network": {"type": "str", "required": True},
    "tenant": {"type": "str", "required": True},
    "customer": {"type": "str", "required": True},
    "project": {"type": "str", "required": True},
    "description": {"type": "str"},
    "cidr": {"type": "str"},
    "gateway_ip": {"type": "str"},
    "disable_gateway": {"type": "bool"},
    "allocation_pools": {"type": "list"},
    "dns_nameservers": {"type": "list"},
    "host_routes": {"type": "list"},
}

RUNNER_CONTEXT = {
    "resource_type": "OpenStack subnet",
    "check_url": "/api/openstack-subnets/",
    "check_filter_keys": {
        "tenant": "tenant_uuid",
        "customer": "customer_uuid",
        "project": "project_uuid",
    },
    "list_path": "/api/openstack-subnets/",
    "create_path": "/api/openstack-networks/{uuid}/create_subnet/",
    "destroy_path": "/api/openstack-subnets/{uuid}/",
    "update_path": "/api/openstack-subnets/{uuid}/",
    "model_param_names": [
        "allocation_pools",
        "cidr",
        "description",
        "disable_gateway",
        "dns_nameservers",
        "gateway_ip",
        "host_routes",
        "name",
    ],
    "path_param_maps": {"create": {"uuid": "network"}},
    "update_fields": [
        "allocation_pools",
        "cidr",
        "description",
        "disable_gateway",
        "dns_nameservers",
        "gateway_ip",
        "host_routes",
        "name",
    ],
    "update_actions": {},
    "resolvers": {
        "tenant": {
            "url": "/api/openstack-tenants/",
            "error_message": None,
            "filter_by": [],
        },
        "customer": {"url": "/api/customers/", "error_message": None, "filter_by": []},
        "project": {"url": "/api/projects/", "error_message": None, "filter_by": []},
        "network": {
            "url": "/api/openstack-networks/",
            "error_message": None,
            "filter_by": [
                {
                    "source_param": "tenant",
                    "source_key": "uuid",
                    "target_key": "tenant_uuid",
                }
            ],
        },
    },
    "resource_detail_path": "/api/openstack-subnets/{uuid}/",
    "wait_config": {
        "ok_states": ["OK"],
        "erred_states": ["ERRED"],
        "state_field": "state",
    },
}


def main():
    """Main execution entrypoint for the Ansible module."""
    module = AnsibleModule(
        argument_spec=ARGUMENT_SPEC,
        supports_check_mode=True,
    )
    runner = CrudRunner(module, RUNNER_CONTEXT)
    runner.run()


if __name__ == "__main__":
    main()
