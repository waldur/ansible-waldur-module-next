#!/usr/bin/python
#
# THIS FILE IS AUTOGENERATED BY THE ANSIBLE MODULE GENERATOR - DO NOT EDIT
#
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.waldur.openstack.plugins.module_utils.waldur.facts_runner import (
    FactsRunner,
)

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "OpenNode",
}

DOCUMENTATION = """
---
module: subnet_facts
short_description: Get facts about a specific subnet
description: ''
author: Waldur Team
options:
  access_token:
    description: An access token.
    required: true
    type: str
    no_log: true
  api_url:
    description: Fully qualified URL to the API.
    required: true
    type: str
  name:
    description: The name or UUID of the subnet.
    type: str
    required: true
  tenant:
    description: The name or UUID of the parent tenant.
    type: str
    required: false
  customer:
    description: The name or UUID of the parent customer.
    type: str
    required: false
  project:
    description: The name or UUID of the parent project.
    type: str
    required: false
  backend_id:
    description: Filter by backend id.
    type: str
    required: false
  can_manage:
    description: Can manage
    type: bool
    required: false
  customer_abbreviation:
    description: Filter by customer abbreviation.
    type: str
    required: false
  customer_name:
    description: Filter by customer name.
    type: str
    required: false
  customer_native_name:
    description: Filter by customer native name.
    type: str
    required: false
  description:
    description: Filter by description.
    type: str
    required: false
  direct_only:
    description: Direct only
    type: bool
    required: false
  enable_dhcp:
    description: Filter by enable dhcp.
    type: bool
    required: false
  external_ip:
    description: Filter by external ip.
    type: str
    required: false
  ip_version:
    description: Filter by ip version.
    type: int
    required: false
  network:
    description: Filter by network.
    type: str
    required: false
  network_uuid:
    description: Filter by network uuid.
    type: str
    required: false
  project_name:
    description: Filter by project name.
    type: str
    required: false
  rbac_only:
    description: RBAC only
    type: bool
    required: false
  service_settings_name:
    description: Filter by service settings name.
    type: str
    required: false
  service_settings_uuid:
    description: Filter by service settings uuid.
    type: str
    required: false
  state:
    description: Filter by state.
    type: list
    required: false
    elements: str
    choices:
    - CREATING
    - CREATION_SCHEDULED
    - DELETING
    - DELETION_SCHEDULED
    - ERRED
    - OK
    - UPDATE_SCHEDULED
    - UPDATING
  uuid:
    description: Filter by uuid.
    type: str
    required: false
requirements:
- python >= 3.11

"""

EXAMPLES = """
- name: Retrieve and print facts about subnets
  hosts: localhost
  tasks:
  - name: Get facts about a specific subnet
    waldur.openstack.subnet_facts:
      name: My Resource Name
      tenant: Tenant name or UUID
      customer: Customer name or UUID
      project: Project name or UUID
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com
    register: resource_info
  - name: Print the retrieved resource facts
    ansible.builtin.debug:
      var: resource_info.subnets

"""

RETURN = """
resource:
  description: A dictionary representing the facts of a single subnet.
  type: dict
  returned: on success
  contains:
    url:
      description: URL URL
      type: str
      returned: always
      sample: https://api.example.com/api/url/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    uuid:
      description: UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    name:
      description: Name
      type: str
      returned: always
      sample: My-Awesome-subnet
    description:
      description: Description
      type: str
      returned: always
      sample: A sample description created by Ansible.
    service_name:
      description: Service name
      type: str
      returned: always
      sample: string-value
    service_settings:
      description: Service settings URL
      type: str
      returned: always
      sample: https://api.example.com/api/service-settings/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    service_settings_uuid:
      description: Service settings UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    service_settings_state:
      description: Service settings state
      type: str
      returned: always
      sample: string-value
    service_settings_error_message:
      description: Service settings error message
      type: str
      returned: always
      sample: string-value
    project:
      description: Project URL
      type: str
      returned: always
      sample: https://api.example.com/api/project/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    project_name:
      description: Project name
      type: str
      returned: always
      sample: Internal Research Project
    project_uuid:
      description: Project UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    customer:
      description: Customer URL
      type: str
      returned: always
      sample: https://api.example.com/api/customer/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    customer_uuid:
      description: Customer UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    customer_name:
      description: Customer name
      type: str
      returned: always
      sample: Big Corp Inc.
    customer_native_name:
      description: Customer native name
      type: str
      returned: always
      sample: string-value
    customer_abbreviation:
      description: Customer abbreviation
      type: str
      returned: always
      sample: string-value
    error_message:
      description: Error message
      type: str
      returned: always
      sample: string-value
    error_traceback:
      description: Error traceback
      type: str
      returned: always
      sample: string-value
    resource_type:
      description: Resource type
      type: str
      returned: always
      sample: string-value
    state:
      description: State
      type: str
      returned: always
      sample: OK
    created:
      description: Created
      type: str
      returned: always
      sample: '2023-10-01T12:00:00Z'
    modified:
      description: Modified
      type: str
      returned: always
      sample: '2023-10-01T12:00:00Z'
    backend_id:
      description: Backend ID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    access_url:
      description: Access URL
      type: str
      returned: always
      sample: string-value
    tenant:
      description: Tenant URL
      type: str
      returned: always
      sample: https://api.example.com/api/tenant/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    tenant_name:
      description: Tenant name
      type: str
      returned: always
      sample: string-value
    network:
      description: Network to which this subnet belongs
      type: str
      returned: always
      sample: https://api.example.com/api/network/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    network_name:
      description: Network name
      type: str
      returned: always
      sample: string-value
    cidr:
      description: CIDR
      type: str
      returned: always
      sample: 192.168.1.0/24
    gateway_ip:
      description: IP address of the gateway for this subnet
      type: str
      returned: always
      sample: 192.168.1.1
    disable_gateway:
      description: If True, no gateway IP address will be allocated
      type: bool
      returned: always
      sample: 192.168.1.1
    allocation_pools:
      description: A list of allocation pools items.
      type: list
      returned: always
      sample: []
      contains:
        start:
          description: An IPv4 or IPv6 address.
          type: str
          returned: always
          sample: null
        end:
          description: An IPv4 or IPv6 address.
          type: str
          returned: always
          sample: null
    ip_version:
      description: IP protocol version (4 or 6)
      type: int
      returned: always
      sample: 123
    enable_dhcp:
      description: If True, DHCP service will be enabled on this subnet
      type: bool
      returned: always
      sample: true
    dns_nameservers:
      description: A list of DNS nameservers items.
      type: list
      returned: always
      sample: []
    host_routes:
      description: A list of host routes items.
      type: list
      returned: always
      sample: []
      contains:
        destination:
          description: Destination
          type: str
          returned: always
          sample: string-value
        nexthop:
          description: An IPv4 or IPv6 address.
          type: str
          returned: always
          sample: null
    is_connected:
      description: Is subnet connected to the default tenant router.
      type: bool
      returned: always
      sample: true
    marketplace_offering_uuid:
      description: Marketplace offering UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_offering_name:
      description: Marketplace offering name
      type: str
      returned: always
      sample: string-value
    marketplace_offering_plugin_options:
      description: Marketplace offering plugin options
      type: dict
      returned: always
      sample: {}
    marketplace_category_uuid:
      description: Marketplace category UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_category_name:
      description: Marketplace category name
      type: str
      returned: always
      sample: string-value
    marketplace_resource_uuid:
      description: Marketplace resource UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_plan_uuid:
      description: Marketplace plan UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_resource_state:
      description: Marketplace resource state
      type: str
      returned: always
      sample: string-value
    is_usage_based:
      description: Is usage based
      type: bool
      returned: always
      sample: true
    is_limit_based:
      description: Is limit based
      type: bool
      returned: always
      sample: true

"""

ARGUMENT_SPEC = {
    "access_token": {"type": "str", "no_log": True, "required": True},
    "api_url": {"type": "str", "required": True},
    "name": {"type": "str", "required": True},
    "tenant": {"type": "str"},
    "customer": {"type": "str"},
    "project": {"type": "str"},
    "backend_id": {"type": "str"},
    "can_manage": {"type": "bool"},
    "customer_abbreviation": {"type": "str"},
    "customer_name": {"type": "str"},
    "customer_native_name": {"type": "str"},
    "description": {"type": "str"},
    "direct_only": {"type": "bool"},
    "enable_dhcp": {"type": "bool"},
    "external_ip": {"type": "str"},
    "ip_version": {"type": "int"},
    "network": {"type": "str"},
    "network_uuid": {"type": "str"},
    "project_name": {"type": "str"},
    "rbac_only": {"type": "bool"},
    "service_settings_name": {"type": "str"},
    "service_settings_uuid": {"type": "str"},
    "state": {
        "type": "list",
        "choices": [
            "CREATING",
            "CREATION_SCHEDULED",
            "DELETING",
            "DELETION_SCHEDULED",
            "ERRED",
            "OK",
            "UPDATE_SCHEDULED",
            "UPDATING",
        ],
    },
    "uuid": {"type": "str"},
}

RUNNER_CONTEXT = {
    "resource_type": "subnet",
    "list_url": "/api/openstack-subnets/",
    "retrieve_url": "/api/openstack-subnets/{uuid}/",
    "identifier_param": "name",
    "resolvers": {
        "tenant": {
            "url": "/api/openstack-tenants/",
            "error_message": "Tenant '{value}' not found.",
            "filter_key": "tenant_uuid",
        },
        "customer": {
            "url": "/api/customers/",
            "error_message": "Customer '{value}' not found.",
            "filter_key": "customer_uuid",
        },
        "project": {
            "url": "/api/projects/",
            "error_message": "Project '{value}' not found.",
            "filter_key": "project_uuid",
        },
    },
    "many": False,
    "inferred_filter_params": [
        "backend_id",
        "can_manage",
        "customer",
        "customer_abbreviation",
        "customer_name",
        "customer_native_name",
        "description",
        "direct_only",
        "enable_dhcp",
        "external_ip",
        "ip_version",
        "network",
        "network_uuid",
        "project",
        "project_name",
        "rbac_only",
        "service_settings_name",
        "service_settings_uuid",
        "state",
        "tenant",
        "uuid",
    ],
}


def main():
    """Main execution entrypoint for the Ansible module."""
    module = AnsibleModule(
        argument_spec=ARGUMENT_SPEC,
        supports_check_mode=True,
    )
    runner = FactsRunner(module, RUNNER_CONTEXT)
    runner.run()


if __name__ == "__main__":
    main()
