#!/usr/bin/python
#
# THIS FILE IS AUTOGENERATED BY THE ANSIBLE MODULE GENERATOR - DO NOT EDIT
#
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.waldur.openstack.plugins.module_utils.waldur.crud_runner import (
    CrudRunner,
)

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "OpenNode",
}

DOCUMENTATION = """
---
module: network_rbac_policy
short_description: Manage OpenStack Network RBAC policies in Waldur.
description: 'When the resource already exists, the following fields can be updated: network, policy_type, target_tenant.'
author: Waldur Team
options:
  access_token:
    description: An access token.
    required: true
    type: str
    no_log: true
  api_url:
    description: Fully qualified URL to the API.
    required: true
    type: str
  state:
    description: Should the resource be present or absent.
    choices:
    - present
    - absent
    default: present
    type: str
  wait:
    description: A boolean value that defines whether to wait for the async action to complete.
    default: true
    type: bool
  timeout:
    description: The maximum number of seconds to wait for the async action to complete.
    default: 600
    type: int
  interval:
    description: The interval in seconds for polling the async action status.
    default: 20
    type: int
  name:
    description: The name of the OpenStack network RBAC policy.
    type: str
    required: true
  tenant:
    description: The name or UUID of the parent tenant for filtering.
    type: str
    required: true
  network:
    description: The name or UUID of the parent network for filtering.
    type: str
    required: true
  target_tenant:
    type: str
    required: true
    description: The name or UUID of the target_tenant. Target tenant
  policy_type:
    type: str
    required: false
    description: Type of access granted - either shared access or external network access
    choices:
    - access_as_shared
    - access_as_external
requirements:
- python >= 3.11

"""

EXAMPLES = """
- name: Create a new OpenStack network RBAC policy
  hosts: localhost
  tasks:
  - name: Add OpenStack network RBAC policy
    waldur.openstack.network_rbac_policy:
      state: present
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com
      network: Network name or UUID
      target_tenant: Target tenant name or UUID
      policy_type: null
- name: Remove an existing OpenStack network RBAC policy
  hosts: localhost
  tasks:
  - name: Remove OpenStack network RBAC policy
    waldur.openstack.network_rbac_policy:
      state: absent
      name: My-Awesome-OpenStack-network-RBAC-policy
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com

"""

RETURN = """
resource:
  description: The state of the OpenStack network RBAC policy after the operation.
  type: dict
  returned: on success
  contains:
    url:
      description: URL URL
      type: str
      returned: always
      sample: https://api.example.com/api/url/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    uuid:
      description: UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    network:
      description: Network URL
      type: str
      returned: always
      sample: https://api.example.com/api/network/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    network_name:
      description: Network name
      type: str
      returned: always
      sample: string-value
    target_tenant:
      description: Target tenant URL
      type: str
      returned: always
      sample: https://api.example.com/api/target-tenant/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    target_tenant_name:
      description: Target tenant name
      type: str
      returned: always
      sample: string-value
    backend_id:
      description: Backend ID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    policy_type:
      description: Type of access granted - either shared access or external network access
      type: str
      returned: always
      sample: null
    created:
      description: Created
      type: str
      returned: always
      sample: '2023-10-01T12:00:00Z'
commands:
  description: A list of HTTP requests that were made (or would be made in check mode) to execute the task.
  type: list
  returned: when changed
  elements: dict
  contains:
    method:
      description: The HTTP method used (e.g., POST, PATCH, DELETE).
      type: str
      sample: POST
    url:
      description: The fully qualified URL of the API endpoint.
      type: str
      sample: https://api.example.com/api/projects/
    description:
      description: A human-readable summary of the command's purpose.
      type: str
      sample: Create new project
    body:
      description: The JSON payload sent with the request. Only present for methods with a body.
      type: dict
      returned: if applicable
      sample:
        name: My-Awesome-Project

"""

ARGUMENT_SPEC = {
    "access_token": {"type": "str", "no_log": True, "required": True},
    "api_url": {"type": "str", "required": True},
    "state": {"type": "str", "choices": ["present", "absent"], "default": "present"},
    "wait": {"type": "bool", "default": True},
    "timeout": {"type": "int", "default": 600},
    "interval": {"type": "int", "default": 20},
    "name": {"type": "str", "required": True},
    "tenant": {"type": "str", "required": True},
    "network": {"type": "str", "required": True},
    "target_tenant": {"type": "str", "required": True},
    "policy_type": {
        "type": "str",
        "choices": ["access_as_shared", "access_as_external"],
    },
}

RUNNER_CONTEXT = {
    "resource_type": "OpenStack network RBAC policy",
    "check_url": "/api/openstack-network-rbac-policies/",
    "check_filter_keys": {"tenant": "tenant_uuid", "network": "network_uuid"},
    "list_path": "/api/openstack-network-rbac-policies/",
    "create_path": "/api/openstack-network-rbac-policies/",
    "destroy_path": "/api/openstack-network-rbac-policies/{uuid}/",
    "update_path": "/api/openstack-network-rbac-policies/{uuid}/",
    "model_param_names": ["target_tenant", "network", "policy_type"],
    "path_param_maps": {},
    "update_fields": ["network", "policy_type", "target_tenant"],
    "update_actions": {},
    "resolvers": {
        "tenant": {
            "url": "/api/openstack-tenants/",
            "error_message": None,
            "filter_by": [],
        },
        "target_tenant": {
            "url": "/api/openstack-tenants/",
            "error_message": None,
            "filter_by": [],
        },
        "network": {
            "url": "/api/openstack-networks/",
            "error_message": None,
            "filter_by": [
                {
                    "source_param": "tenant",
                    "source_key": "uuid",
                    "target_key": "tenant_uuid",
                }
            ],
        },
    },
    "resolver_order": ["network", "target_tenant", "tenant"],
    "resource_detail_path": "/api/openstack-network-rbac-policies/{uuid}/",
}


def main():
    """Main execution entrypoint for the Ansible module."""
    module = AnsibleModule(
        argument_spec=ARGUMENT_SPEC,
        supports_check_mode=True,
    )
    runner = CrudRunner(module, RUNNER_CONTEXT)
    runner.run()


if __name__ == "__main__":
    main()
