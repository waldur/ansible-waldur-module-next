#!/usr/bin/python
#
# THIS FILE IS AUTOGENERATED BY THE ANSIBLE MODULE GENERATOR - DO NOT EDIT
#
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.waldur.openstack.plugins.module_utils.waldur.order_runner import (
    OrderRunner,
)

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "OpenNode",
}

DOCUMENTATION = """
---
module: volume
short_description: Create, update or delete a volume via the marketplace.
description: 'When the resource already exists, the following fields can be updated: bootable, description, name.'
author: Waldur Team
options:
  access_token:
    description: An access token.
    required: true
    type: str
    no_log: true
  api_url:
    description: Fully qualified URL to the API.
    required: true
    type: str
  state:
    description: Should the resource be present or absent.
    choices:
    - present
    - absent
    default: present
    type: str
  wait:
    description: A boolean value that defines whether to wait for the async action to complete.
    default: true
    type: bool
  timeout:
    description: The maximum number of seconds to wait for the async action to complete.
    default: 600
    type: int
  interval:
    description: The interval in seconds for polling the async action status.
    default: 20
    type: int
  name:
    type: str
    required: false
    description:
    - Name
    - Required when C(state) is 'present'.
  project:
    type: str
    required: true
    description: The name or UUID of the project.
  offering:
    type: str
    required: false
    description:
    - The name or UUID of the marketplace offering.
    - Required when C(state) is 'present'.
    - This attribute cannot be updated.
  plan:
    type: str
    required: false
    description:
    - URL of the marketplace plan.
    - This attribute cannot be updated.
  description:
    type: str
    required: false
    description: Description
  image:
    type: str
    required: false
    description:
    - Image that this volume was created from, if any
    - This attribute cannot be updated.
  size:
    type: int
    required: false
    description:
    - Size in MiB. The value should be provided in GiB and will be converted to MiB. The value should be provided in GiB and will be converted to MiB.
    - This attribute cannot be updated.
  availability_zone:
    type: str
    required: false
    description:
    - Availability zone where this volume is located
    - This attribute cannot be updated.
  type:
    type: str
    required: false
    description:
    - Type of the volume (e.g. SSD, HDD)
    - This attribute cannot be updated.
requirements:
- python >= 3.11

"""

EXAMPLES = """
- name: Create a new volume
  hosts: localhost
  tasks:
  - name: Add volume
    waldur.openstack.volume:
      state: present
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com
      project: Project Name or UUID
      offering: Offering Name or UUID
      name: My-Awesome-volume
      description: A sample description created by Ansible.
      image: Image name or UUID
      size: 100
      availability_zone: Availability zone name or UUID
      type: Type name or UUID
- name: Remove an existing volume
  hosts: localhost
  tasks:
  - name: Remove volume
    waldur.openstack.volume:
      state: absent
      name: My-Awesome-volume
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com
      project: Project Name or UUID
      offering: Offering Name or UUID

"""

RETURN = """
resource:
  description: A dictionary describing the volume after a successful 'present' state.
  type: dict
  returned: on success when state is 'present'
  contains:
    url:
      description: URL URL
      type: str
      returned: always
      sample: https://api.example.com/api/url/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    uuid:
      description: UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    name:
      description: Name
      type: str
      returned: always
      sample: My-Awesome-Resource
    description:
      description: Description
      type: str
      returned: always
      sample: A sample description created by Ansible.
    service_name:
      description: Service name
      type: str
      returned: always
      sample: string-value
    service_settings:
      description: Service settings URL
      type: str
      returned: always
      sample: https://api.example.com/api/service-settings/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    service_settings_uuid:
      description: Service settings UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    service_settings_state:
      description: Service settings state
      type: str
      returned: always
      sample: string-value
    service_settings_error_message:
      description: Service settings error message
      type: str
      returned: always
      sample: string-value
    project:
      description: Project URL
      type: str
      returned: always
      sample: https://api.example.com/api/project/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    project_name:
      description: Project name
      type: str
      returned: always
      sample: Internal Research Project
    project_uuid:
      description: Project UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    customer:
      description: Customer URL
      type: str
      returned: always
      sample: https://api.example.com/api/customer/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    customer_uuid:
      description: Customer UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    customer_name:
      description: Customer name
      type: str
      returned: always
      sample: Big Corp Inc.
    customer_native_name:
      description: Customer native name
      type: str
      returned: always
      sample: string-value
    customer_abbreviation:
      description: Customer abbreviation
      type: str
      returned: always
      sample: string-value
    error_message:
      description: Error message
      type: str
      returned: always
      sample: string-value
    error_traceback:
      description: Error traceback
      type: str
      returned: always
      sample: string-value
    resource_type:
      description: Resource type
      type: str
      returned: always
      sample: string-value
    state:
      description: State
      type: str
      returned: always
      sample: OK
    created:
      description: Created
      type: str
      returned: always
      sample: '2023-10-01T12:00:00Z'
    modified:
      description: Modified
      type: str
      returned: always
      sample: '2023-10-01T12:00:00Z'
    backend_id:
      description: Volume ID in the OpenStack backend
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    access_url:
      description: Access URL
      type: str
      returned: always
      sample: string-value
    source_snapshot:
      description: Snapshot that this volume was created from, if any
      type: str
      returned: always
      sample: https://api.example.com/api/source-snapshot/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    size:
      description: Size in MiB
      type: int
      returned: always
      sample: 100
    bootable:
      description: Indicates if this volume can be used to boot an instance
      type: bool
      returned: always
      sample: true
    metadata:
      description: Metadata
      type: str
      returned: always
      sample: null
    image:
      description: Image that this volume was created from, if any
      type: str
      returned: always
      sample: https://api.example.com/api/image/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    image_metadata:
      description: Metadata of the image this volume was created from
      type: str
      returned: always
      sample: string-value
    image_name:
      description: Name of the image this volume was created from
      type: str
      returned: always
      sample: string-value
    type:
      description: Type of the volume (e.g. SSD, HDD)
      type: str
      returned: always
      sample: https://api.example.com/api/type/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    type_name:
      description: Type name
      type: str
      returned: always
      sample: string-value
    runtime_state:
      description: Runtime state
      type: str
      returned: always
      sample: string-value
    availability_zone:
      description: Availability zone where this volume is located
      type: str
      returned: always
      sample: https://api.example.com/api/availability-zone/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    availability_zone_name:
      description: Availability zone name
      type: str
      returned: always
      sample: string-value
    device:
      description: Name of volume as instance device e.g. /dev/vdb.
      type: str
      returned: always
      sample: string-value
    action:
      description: Action
      type: str
      returned: always
      sample: string-value
    action_details:
      description: Action details
      type: str
      returned: always
      sample: null
    instance:
      description: Instance that this volume is attached to, if any
      type: str
      returned: always
      sample: https://api.example.com/api/instance/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    instance_name:
      description: Instance name
      type: str
      returned: always
      sample: string-value
    instance_marketplace_uuid:
      description: Instance marketplace UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    tenant:
      description: Tenant URL
      type: str
      returned: always
      sample: https://api.example.com/api/tenant/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    tenant_uuid:
      description: Tenant UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    extend_enabled:
      description: Extend enabled
      type: bool
      returned: always
      sample: true
    marketplace_offering_uuid:
      description: Marketplace offering UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_offering_name:
      description: Marketplace offering name
      type: str
      returned: always
      sample: string-value
    marketplace_offering_plugin_options:
      description: Marketplace offering plugin options
      type: dict
      returned: always
      sample: {}
    marketplace_category_uuid:
      description: Marketplace category UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_category_name:
      description: Marketplace category name
      type: str
      returned: always
      sample: string-value
    marketplace_resource_uuid:
      description: Marketplace resource UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_plan_uuid:
      description: Marketplace plan UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    marketplace_resource_state:
      description: Marketplace resource state
      type: str
      returned: always
      sample: string-value
    is_usage_based:
      description: Is usage based
      type: bool
      returned: always
      sample: true
    is_limit_based:
      description: Is limit based
      type: bool
      returned: always
      sample: true
commands:
  description: A list of HTTP requests that were made (or would be made in check mode) to execute the task.
  type: list
  returned: when changed
  elements: dict
  contains:
    method:
      description: The HTTP method used (e.g., POST, PATCH, DELETE).
      type: str
      sample: POST
    url:
      description: The fully qualified URL of the API endpoint.
      type: str
      sample: https://api.example.com/api/projects/
    description:
      description: A human-readable summary of the command's purpose.
      type: str
      sample: Create new project
    body:
      description: The JSON payload sent with the request. Only present for methods with a body.
      type: dict
      returned: if applicable
      sample:
        name: My-Awesome-Project

"""

ARGUMENT_SPEC = {
    "access_token": {"type": "str", "no_log": True, "required": True},
    "api_url": {"type": "str", "required": True},
    "state": {"type": "str", "choices": ["present", "absent"], "default": "present"},
    "wait": {"type": "bool", "default": True},
    "timeout": {"type": "int", "default": 600},
    "interval": {"type": "int", "default": 20},
    "name": {"type": "str"},
    "project": {"type": "str", "required": True},
    "offering": {"type": "str"},
    "plan": {"type": "str"},
    "description": {"type": "str"},
    "image": {"type": "str"},
    "size": {"type": "int"},
    "availability_zone": {"type": "str"},
    "type": {"type": "str"},
}

RUNNER_CONTEXT = {
    "resource_type": "volume",
    "check_url": "/api/openstack-volumes/",
    "check_filter_keys": {"project": "project_uuid"},
    "update_url": None,
    "update_fields": ["bootable", "description", "name"],
    "attribute_param_names": [
        "type",
        "image",
        "availability_zone",
        "description",
        "name",
        "size",
    ],
    "required_for_create": ["name", "offering"],
    "termination_attributes_map": {},
    "resolvers": {
        "project": {
            "url": "/api/projects/",
            "error_message": None,
            "filter_by": [],
            "is_list": None,
            "list_item_keys": {},
        },
        "type": {
            "url": "/api/openstack-volume-types/",
            "error_message": None,
            "filter_by": [
                {
                    "source_param": "offering",
                    "source_key": "scope_uuid",
                    "target_key": "tenant_uuid",
                }
            ],
            "is_list": False,
            "list_item_keys": {},
        },
        "image": {
            "url": "/api/openstack-images/",
            "error_message": None,
            "filter_by": [
                {
                    "source_param": "offering",
                    "source_key": "scope_uuid",
                    "target_key": "tenant_uuid",
                }
            ],
            "is_list": False,
            "list_item_keys": {},
        },
        "availability_zone": {
            "url": "/api/openstack-volume-availability-zones/",
            "error_message": None,
            "filter_by": [
                {
                    "source_param": "offering",
                    "source_key": "scope_uuid",
                    "target_key": "tenant_uuid",
                }
            ],
            "is_list": False,
            "list_item_keys": {},
        },
        "offering": {
            "url": "/api/marketplace-public-offerings/",
            "error_message": None,
            "filter_by": [],
            "is_list": None,
            "list_item_keys": {},
        },
    },
    "resolver_order": ["project", "type", "image", "availability_zone", "offering"],
    "update_actions": {},
    "resource_detail_path": "/api/openstack-volumes/{uuid}/",
    "transformations": {"size": "gb_to_mb"},
}


def main():
    """Main execution entrypoint for the Ansible module."""
    module = AnsibleModule(
        argument_spec=ARGUMENT_SPEC,
        supports_check_mode=True,
    )
    runner = OrderRunner(module, RUNNER_CONTEXT)
    runner.run()


if __name__ == "__main__":
    main()
