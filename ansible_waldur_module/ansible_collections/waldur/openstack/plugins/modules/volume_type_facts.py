#!/usr/bin/python
#
# THIS FILE IS AUTOGENERATED BY THE ANSIBLE MODULE GENERATOR - DO NOT EDIT
#
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.waldur.openstack.plugins.module_utils.waldur.facts_runner import (
    FactsRunner,
)

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "OpenNode",
}

DOCUMENTATION = """
---
module: volume_type_facts
short_description: Get facts about a specific volume type
description: ''
author: Waldur Team
options:
  access_token:
    description: An access token.
    required: true
    type: str
    no_log: true
  api_url:
    description: Fully qualified URL to the API.
    required: true
    type: str
  name:
    description: The name or UUID of the volume type.
    type: str
    required: true
  offering_uuid:
    description: Filter by offering uuid.
    type: str
    required: false
  settings:
    description: Filter by settings.
    type: str
    required: false
  settings_uuid:
    description: Filter by settings uuid.
    type: str
    required: false
  tenant:
    description: Filter by tenant.
    type: str
    required: false
  tenant_uuid:
    description: Filter by tenant uuid.
    type: str
    required: false
requirements:
- python >= 3.11

"""

EXAMPLES = """
- name: Retrieve and print facts about volume types
  hosts: localhost
  tasks:
  - name: Get facts about a specific volume type
    waldur.openstack.volume_type_facts:
      name: My Resource Name
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com
    register: resource_info
  - name: Print the retrieved resource facts
    ansible.builtin.debug:
      var: resource_info.volume_types

"""

RETURN = """
resource:
  description: A dictionary representing the facts of a single volume type.
  type: dict
  returned: on success
  contains:
    url:
      description: URL URL
      type: str
      returned: always
      sample: https://api.example.com/api/url/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    uuid:
      description: UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    name:
      description: Name
      type: str
      returned: always
      sample: My-Awesome-volume-type
    description:
      description: Description
      type: str
      returned: always
      sample: A sample description created by Ansible.
    settings:
      description: Settings URL
      type: str
      returned: always
      sample: https://api.example.com/api/settings/a1b2c3d4-e5f6-7890-abcd-ef1234567890/

"""

ARGUMENT_SPEC = {
    "access_token": {"type": "str", "no_log": True, "required": True},
    "api_url": {"type": "str", "required": True},
    "name": {"type": "str", "required": True},
    "offering_uuid": {"type": "str"},
    "settings": {"type": "str"},
    "settings_uuid": {"type": "str"},
    "tenant": {"type": "str"},
    "tenant_uuid": {"type": "str"},
}

RUNNER_CONTEXT = {
    "resource_type": "volume type",
    "list_url": "/api/openstack-volume-types/",
    "retrieve_url": "/api/openstack-volume-types/{uuid}/",
    "identifier_param": "name",
    "resolvers": {},
    "many": False,
    "inferred_filter_params": [
        "offering_uuid",
        "settings",
        "settings_uuid",
        "tenant",
        "tenant_uuid",
    ],
}


def main():
    """Main execution entrypoint for the Ansible module."""
    module = AnsibleModule(
        argument_spec=ARGUMENT_SPEC,
        supports_check_mode=True,
    )
    runner = FactsRunner(module, RUNNER_CONTEXT)
    runner.run()


if __name__ == "__main__":
    main()
