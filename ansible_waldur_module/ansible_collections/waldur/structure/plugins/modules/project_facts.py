#!/usr/bin/python
#
# THIS FILE IS AUTOGENERATED BY THE ANSIBLE MODULE GENERATOR - DO NOT EDIT
#
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.waldur.structure.plugins.module_utils.waldur.facts_runner import (
    FactsRunner,
)

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "OpenNode",
}

DOCUMENTATION = """
---
module: project_facts
short_description: Get facts about a specific project
description: ''
author: Waldur Team
options:
  access_token:
    description: An access token.
    required: true
    type: str
    no_log: true
  api_url:
    description: Fully qualified URL to the API.
    required: true
    type: str
  name:
    description: The name or UUID of the project.
    type: str
    required: true
  customer:
    description: The name or UUID of the parent customer.
    type: str
    required: true
  backend_id:
    description: Filter by backend id.
    type: str
    required: false
  can_admin:
    description: Return a list of projects where current user is admin.
    type: bool
    required: false
  can_manage:
    description: Return a list of projects where current user is manager or a customer owner.
    type: bool
    required: false
  conceal_finished_projects:
    description: Conceal finished projects
    type: bool
    required: false
  created:
    description: Created after
    type: str
    required: false
  customer_abbreviation:
    description: Filter by customer abbreviation.
    type: str
    required: false
  customer_name:
    description: Filter by customer name.
    type: str
    required: false
  customer_native_name:
    description: Filter by customer native name.
    type: str
    required: false
  description:
    description: Filter by description.
    type: str
    required: false
  include_terminated:
    description: Include soft-deleted (terminated) projects. Only available to staff and support users, or users with organizational roles who can see their terminated projects.
    type: bool
    required: false
  is_removed:
    description: Filter by is removed.
    type: bool
    required: false
  modified:
    description: Modified after
    type: str
    required: false
  query:
    description: Filter by name, UUID, backend ID or resource effective ID
    type: str
    required: false
  slug:
    description: Filter by slug.
    type: str
    required: false
requirements:
- python >= 3.11

"""

EXAMPLES = """
- name: Retrieve and print facts about projects
  hosts: localhost
  tasks:
  - name: Get facts about a specific project
    waldur.structure.project_facts:
      name: My Resource Name
      customer: Customer name or UUID
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com
    register: resource_info
  - name: Print the retrieved resource facts
    ansible.builtin.debug:
      var: resource_info.projects

"""

RETURN = """
resource:
  description: A list of dictionaries, where each dictionary represents a project.
  type: list
  returned: always
  elements: dict
  contains:
    url:
      description: URL URL
      type: str
      returned: always
      sample: https://api.example.com/api/url/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    uuid:
      description: UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    name:
      description: Name
      type: str
      returned: always
      sample: My-Awesome-project
    slug:
      description: Slug
      type: str
      returned: always
      sample: string-value
    customer:
      description: Customer URL
      type: str
      returned: always
      sample: https://api.example.com/api/customer/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    customer_uuid:
      description: Customer UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    customer_name:
      description: Customer name
      type: str
      returned: always
      sample: Big Corp Inc.
    customer_slug:
      description: Customer slug
      type: str
      returned: always
      sample: string-value
    customer_native_name:
      description: Customer native name
      type: str
      returned: always
      sample: string-value
    customer_abbreviation:
      description: Customer abbreviation
      type: str
      returned: always
      sample: string-value
    description:
      description: Description
      type: str
      returned: always
      sample: A sample description created by Ansible.
    customer_display_billing_info_in_projects:
      description: Customer display billing info in projects
      type: bool
      returned: always
      sample: true
    created:
      description: Created
      type: str
      returned: always
      sample: '2023-10-01T12:00:00Z'
    type:
      description: Type URL
      type: str
      returned: always
      sample: https://api.example.com/api/type/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    type_name:
      description: Type name
      type: str
      returned: always
      sample: string-value
    type_uuid:
      description: Type UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    backend_id:
      description: Backend ID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    start_date:
      description: Start date
      type: str
      returned: always
      sample: '2023-10-01'
    end_date:
      description: End date
      type: str
      returned: always
      sample: '2023-10-01'
    end_date_requested_by:
      description: End date requested by URL
      type: str
      returned: always
      sample: https://api.example.com/api/users/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    oecd_fos_2007_code:
      description: Oecd fos 2007 code
      type: str
      returned: always
      sample: null
    oecd_fos_2007_label:
      description: Oecd fos 2007 label
      type: str
      returned: always
      sample: string-value
    is_industry:
      description: Is industry
      type: bool
      returned: always
      sample: true
    image:
      description: Image URL
      type: str
      returned: always
      sample: https://api.example.com/api/image/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    resources_count:
      description: Resources count
      type: int
      returned: always
      sample: 123
    max_service_accounts:
      description: Maximum number of service accounts allowed
      type: int
      returned: always
      sample: 123
    kind:
      description: Kind
      type: str
      returned: always
      sample: null
    is_removed:
      description: Is removed
      type: bool
      returned: always
      sample: true
    termination_metadata:
      description: Termination metadata
      type: str
      returned: always
      sample: null
    project_credit:
      description: Project credit
      type: float
      returned: always
      sample: 123.45
    marketplace_resource_count:
      description: Marketplace resource count
      type: dict
      returned: always
      sample: {}
    billing_price_estimate:
      description: Billing price estimate
      type: str
      returned: always
      sample: null

"""

ARGUMENT_SPEC = {
    "access_token": {"type": "str", "no_log": True, "required": True},
    "api_url": {"type": "str", "required": True},
    "name": {"type": "str", "required": True},
    "customer": {"type": "str", "required": True},
    "backend_id": {"type": "str"},
    "can_admin": {"type": "bool"},
    "can_manage": {"type": "bool"},
    "conceal_finished_projects": {"type": "bool"},
    "created": {"type": "str"},
    "customer_abbreviation": {"type": "str"},
    "customer_name": {"type": "str"},
    "customer_native_name": {"type": "str"},
    "description": {"type": "str"},
    "include_terminated": {"type": "bool"},
    "is_removed": {"type": "bool"},
    "modified": {"type": "str"},
    "query": {"type": "str"},
    "slug": {"type": "str"},
}

RUNNER_CONTEXT = {
    "resource_type": "project",
    "list_url": "/api/projects/",
    "retrieve_url": "/api/projects/{uuid}/",
    "identifier_param": "name",
    "resolvers": {
        "customer": {
            "url": "/api/customers/",
            "error_message": "Customer '{value}' not found.",
            "filter_key": "customer",
        }
    },
    "many": False,
    "inferred_filter_params": [
        "backend_id",
        "can_admin",
        "can_manage",
        "conceal_finished_projects",
        "created",
        "customer_abbreviation",
        "customer_name",
        "customer_native_name",
        "description",
        "include_terminated",
        "is_removed",
        "modified",
        "query",
        "slug",
    ],
}


def main():
    """Main execution entrypoint for the Ansible module."""
    module = AnsibleModule(
        argument_spec=ARGUMENT_SPEC,
        supports_check_mode=True,
    )
    runner = FactsRunner(module, RUNNER_CONTEXT)
    runner.run()


if __name__ == "__main__":
    main()
