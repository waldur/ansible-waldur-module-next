#!/usr/bin/python
#
# THIS FILE IS AUTOGENERATED BY THE ANSIBLE MODULE GENERATOR - DO NOT EDIT
#
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.waldur.structure.plugins.module_utils.waldur.facts_runner import (
    FactsRunner,
)

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "OpenNode",
}

DOCUMENTATION = """
---
module: ssh_key_facts
short_description: Get facts about a specific ssh key
description: ''
author: Waldur Team
options:
  access_token:
    description: An access token.
    required: true
    type: str
    no_log: true
  api_url:
    description: Fully qualified URL to the API.
    required: true
    type: str
  name:
    description: The name or UUID of the ssh key.
    type: str
    required: true
  created:
    description: Created after
    type: str
    required: false
  fingerprint_md5:
    description: Filter by fingerprint md5.
    type: str
    required: false
  fingerprint_sha256:
    description: Filter by fingerprint sha256.
    type: str
    required: false
  fingerprint_sha512:
    description: Filter by fingerprint sha512.
    type: str
    required: false
  is_shared:
    description: Filter by is shared.
    type: bool
    required: false
  modified:
    description: Modified after
    type: str
    required: false
  user_uuid:
    description: Filter by user uuid.
    type: str
    required: false
  uuid:
    description: Filter by uuid.
    type: str
    required: false
requirements:
- python >= 3.11

"""

EXAMPLES = """
- name: Retrieve and print facts about ssh keys
  hosts: localhost
  tasks:
  - name: Get facts about a specific ssh key
    waldur.structure.ssh_key_facts:
      name: My Resource Name
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com
    register: resource_info
  - name: Print the retrieved resource facts
    ansible.builtin.debug:
      var: resource_info.ssh_keys

"""

RETURN = """
resource:
  description: A list of dictionaries, where each dictionary represents a ssh key.
  type: list
  returned: always
  elements: dict
  contains:
    url:
      description: URL URL
      type: str
      returned: always
      sample: https://api.example.com/api/url/a1b2c3d4-e5f6-7890-abcd-ef1234567890/
    uuid:
      description: UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    name:
      description: Name
      type: str
      returned: always
      sample: My-Awesome-ssh-key
    public_key:
      description: Public key
      type: str
      returned: always
      sample: string-value
    fingerprint_md5:
      description: Fingerprint md5
      type: str
      returned: always
      sample: string-value
    fingerprint_sha256:
      description: Fingerprint sha256
      type: str
      returned: always
      sample: string-value
    fingerprint_sha512:
      description: Fingerprint sha512
      type: str
      returned: always
      sample: string-value
    user_uuid:
      description: User UUID
      type: str
      returned: always
      sample: a1b2c3d4-e5f6-7890-abcd-ef1234567890
    is_shared:
      description: Is shared
      type: bool
      returned: always
      sample: true
    type:
      description: Type
      type: str
      returned: always
      sample: string-value

"""

ARGUMENT_SPEC = {
    "access_token": {"type": "str", "no_log": True, "required": True},
    "api_url": {"type": "str", "required": True},
    "name": {"type": "str", "required": True},
    "created": {"type": "str"},
    "fingerprint_md5": {"type": "str"},
    "fingerprint_sha256": {"type": "str"},
    "fingerprint_sha512": {"type": "str"},
    "is_shared": {"type": "bool"},
    "modified": {"type": "str"},
    "user_uuid": {"type": "str"},
    "uuid": {"type": "str"},
}

RUNNER_CONTEXT = {
    "resource_type": "ssh key",
    "list_url": "/api/keys/",
    "retrieve_url": "/api/keys/{uuid}/",
    "identifier_param": "name",
    "resolvers": {},
    "many": False,
    "inferred_filter_params": [
        "created",
        "fingerprint_md5",
        "fingerprint_sha256",
        "fingerprint_sha512",
        "is_shared",
        "modified",
        "user_uuid",
        "uuid",
    ],
}


def main():
    """Main execution entrypoint for the Ansible module."""
    module = AnsibleModule(
        argument_spec=ARGUMENT_SPEC,
        supports_check_mode=True,
    )
    runner = FactsRunner(module, RUNNER_CONTEXT)
    runner.run()


if __name__ == "__main__":
    main()
