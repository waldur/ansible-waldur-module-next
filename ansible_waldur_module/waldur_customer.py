#!/usr/bin/python
#
# THIS FILE IS AUTOGENERATED BY THE ANSIBLE MODULE GENERATOR - DO NOT EDIT
#
from ansible.module_utils.basic import AnsibleModule
from ansible_waldur_generator.plugins.crud.runner import CrudResourceRunner
from waldur_api_client.api.customers import customers_create
from waldur_api_client.api.customers import customers_destroy
from waldur_api_client.api.customers import customers_list
from waldur_api_client.models.customer_request import CustomerRequest

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "OpenNode",
}

DOCUMENTATION = """
---
module: waldur_customer
short_description: Manage Customers in Waldur.
version_added: '0.1'
description:
- Manage Customers in Waldur.
requirements:
- python = 3.11
- waldur-api-client
options:
  access_token:
    description: An access token.
    required: true
    type: str
  api_url:
    description: Fully qualified URL to the API.
    required: true
    type: str
  state:
    description: Should the resource be present or absent.
    choices:
    - present
    - absent
    type: str
    required: false
  name:
    type: str
    required: true
    description: The name of the customer to check/create/delete.
  backend_id:
    type: str
    required: false
    description: Organization identifier in another application.
  image:
    type: str
    required: false
    description: ''
  native_name:
    type: str
    required: false
    description: ''
  abbreviation:
    type: str
    required: false
    description: ''
  contact_details:
    type: str
    required: false
    description: ''
  email:
    type: str
    required: false
    description: ''
  phone_number:
    type: str
    required: false
    description: ''
  registration_code:
    type: str
    required: false
    description: ''
  homepage:
    type: str
    required: false
    description: ''
  vat_code:
    type: str
    required: false
    description: VAT number
  postal:
    type: str
    required: false
    description: ''
  address:
    type: str
    required: false
    description: ''
  bank_name:
    type: str
    required: false
    description: ''
  latitude:
    type: float
    required: false
    description: ''
  longitude:
    type: float
    required: false
    description: ''
  bank_account:
    type: str
    required: false
    description: ''
  country:
    type: str
    required: false
    description: ''
    choices:
    - AL
    - AT
    - BE
    - BG
    - BA
    - CH
    - CY
    - CZ
    - DE
    - DK
    - ES
    - EE
    - FI
    - FR
    - GB
    - GE
    - GR
    - HR
    - HU
    - IE
    - IS
    - IT
    - LT
    - LU
    - LV
    - MC
    - MK
    - MT
    - NL
    - 'NO'
    - PL
    - PT
    - RO
    - RS
    - SK
    - SI
    - SE
    - UA
    - EU
    - ''
"""

EXAMPLES = """
- name: Create a new customer.
  hosts: localhost
  tasks:
  - name: Add customer
    waldur_customer:
      access_token: some_value
      api_url: some_value
      state: present
      name: My Awesome Customer
- name: Remove an existing customer.
  hosts: localhost
  tasks:
  - name: Remove customer
    waldur_customer:
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com:8000/api
      state: absent
      name: My Awesome Customer
"""

ARGUMENT_SPEC = {
    "access_token": {"type": "str", "required": True},
    "api_url": {"type": "str", "required": True},
    "state": {"type": "str", "required": False, "choices": ["present", "absent"]},
    "name": {"type": "str", "required": True},
    "backend_id": {"type": "str", "required": False},
    "image": {"type": "str", "required": False},
    "native_name": {"type": "str", "required": False},
    "abbreviation": {"type": "str", "required": False},
    "contact_details": {"type": "str", "required": False},
    "email": {"type": "str", "required": False},
    "phone_number": {"type": "str", "required": False},
    "registration_code": {"type": "str", "required": False},
    "homepage": {"type": "str", "required": False},
    "vat_code": {"type": "str", "required": False},
    "postal": {"type": "str", "required": False},
    "address": {"type": "str", "required": False},
    "bank_name": {"type": "str", "required": False},
    "latitude": {"type": "float", "required": False},
    "longitude": {"type": "float", "required": False},
    "bank_account": {"type": "str", "required": False},
    "country": {
        "type": "str",
        "required": False,
        "choices": [
            "AL",
            "AT",
            "BE",
            "BG",
            "BA",
            "CH",
            "CY",
            "CZ",
            "DE",
            "DK",
            "ES",
            "EE",
            "FI",
            "FR",
            "GB",
            "GE",
            "GR",
            "HR",
            "HU",
            "IE",
            "IS",
            "IT",
            "LT",
            "LU",
            "LV",
            "MC",
            "MK",
            "MT",
            "NL",
            "NO",
            "PL",
            "PT",
            "RO",
            "RS",
            "SK",
            "SI",
            "SE",
            "UA",
            "EU",
            "",
        ],
    },
}

RUNNER_CONTEXT = {
    "resource_type": "customer",
    "existence_check_func": customers_list,
    "present_create_func": customers_create,
    "present_create_model_class": CustomerRequest,
    "absent_destroy_func": customers_destroy,
    "absent_destroy_path_param": "uuid",
    "model_param_names": [
        "backend_id",
        "image",
        "name",
        "native_name",
        "abbreviation",
        "contact_details",
        "email",
        "phone_number",
        "registration_code",
        "homepage",
        "vat_code",
        "postal",
        "address",
        "bank_name",
        "latitude",
        "longitude",
        "bank_account",
        "country",
    ],
    "resolvers": {},
}


def main():
    module = AnsibleModule(
        argument_spec=ARGUMENT_SPEC,
        supports_check_mode=True,
    )
    runner = CrudResourceRunner(module, RUNNER_CONTEXT)
    runner.run()


if __name__ == "__main__":
    main()
