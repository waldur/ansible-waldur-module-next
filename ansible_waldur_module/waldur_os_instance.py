#!/usr/bin/python
#
# THIS FILE IS AUTOGENERATED BY THE ANSIBLE MODULE GENERATOR - DO NOT EDIT
#
from ansible.module_utils.basic import AnsibleModule
from ansible_waldur_generator.plugins.order.runner import OrderRunner
from waldur_api_client.api.keys import keys_list
from waldur_api_client.api.keys import keys_retrieve
from waldur_api_client.api.marketplace_orders import marketplace_orders_create
from waldur_api_client.api.marketplace_orders import marketplace_orders_retrieve
from waldur_api_client.api.marketplace_public_offerings import (
    marketplace_public_offerings_list,
)
from waldur_api_client.api.marketplace_public_offerings import (
    marketplace_public_offerings_retrieve,
)
from waldur_api_client.api.marketplace_resources import marketplace_resources_terminate
from waldur_api_client.api.openstack_flavors import openstack_flavors_list
from waldur_api_client.api.openstack_flavors import openstack_flavors_retrieve
from waldur_api_client.api.openstack_images import openstack_images_list
from waldur_api_client.api.openstack_images import openstack_images_retrieve
from waldur_api_client.api.openstack_instances import openstack_instances_list
from waldur_api_client.api.openstack_volume_types import openstack_volume_types_list
from waldur_api_client.api.openstack_volume_types import openstack_volume_types_retrieve
from waldur_api_client.api.projects import projects_list
from waldur_api_client.api.projects import projects_retrieve
from waldur_api_client.models import OrderCreateRequest
from waldur_api_client.models import ResourceTerminateRequest

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "OpenNode",
}

DOCUMENTATION = """
---
module: waldur_os_instance
short_description: Create or delete an OpenStack Instance.
version_added: '0.1'
description:
- Create or delete an OpenStack Instance.
requirements:
- python = 3.11
- waldur-api-client
options:
  access_token:
    description: An access token.
    required: true
    type: str
  api_url:
    description: Fully qualified URL to the API.
    required: true
    type: str
  state:
    description: Should the resource be present or absent.
    choices:
    - present
    - absent
    type: str
    required: false
  wait:
    description: A boolean value that defines whether to wait for the order to complete.
    type: bool
    required: false
  timeout:
    description: The maximum number of seconds to wait for the order to complete.
    type: int
    required: false
  interval:
    description: The interval in seconds for polling the order status.
    type: int
    required: false
  name:
    type: str
    required: true
    description: The name of the OpenStack instance.
  project:
    type: str
    required: true
    description: The name or UUID of the project.
  offering:
    type: str
    required: true
    description: The name or UUID of the marketplace offering.
  description:
    type: str
    required: false
    description: A description for the OpenStack instance.
  flavor:
    type: str
    required: true
    description: The name or UUID of the flavor. The name or UUID of the instance flavor (e.g., 'm1.small').
  image:
    type: str
    required: true
    description: The name or UUID of the image. The name or UUID of the instance image.
  system_volume_size:
    type: str
    required: true
    description: The size of the system volume in gigabytes (GB).
  system_volume_type:
    type: str
    required: false
    description: The name or UUID of the system_volume_type. The name or UUID of the system volume type.
  data_volume_size:
    type: str
    required: false
    description: 'The size of the data volume in megabytes (MB). Note: Must be in MB.'
  data_volume_type:
    type: str
    required: false
    description: The name or UUID of the data_volume_type. The name or UUID of the data volume type.
  ssh_key:
    type: str
    required: false
    description: The name or UUID of the ssh_key. The name or UUID of the SSH key to inject.
  security_groups:
    type: str
    required: false
    description: A list of security group names or UUIDs to apply at creation time.
  networks:
    type: str
    required: true
    description: 'A list of networks to attach, e.g., [{''subnet'': ''subnet-name-or-uuid''}].'
  user_data:
    type: str
    required: false
    description: Cloud-init user data script.
"""

EXAMPLES = """
- name: Create a new OpenStack instance
  hosts: localhost
  tasks:
  - name: Add OpenStack instance
    waldur_os_instance:
      access_token: some_value
      api_url: some_value
      state: present
      name: My-Awesome-OpenStack-instance
      project: Cloud Project
      offering: Standard Volume Offering
      flavor: some_value
      image: some_value
      system_volume_size: 10
      networks: some_value
- name: Remove an existing OpenStack instance
  hosts: localhost
  tasks:
  - name: Remove OpenStack instance
    waldur_os_instance:
      name: My-Awesome-OpenStack-instance
      project: Cloud Project
      state: absent
      access_token: b83557fd8e2066e98f27dee8f3b3433cdc4183ce
      api_url: https://waldur.example.com/api
"""

ARGUMENT_SPEC = {
    "access_token": {"type": "str", "required": True},
    "api_url": {"type": "str", "required": True},
    "state": {"type": "str", "required": False, "choices": ["present", "absent"]},
    "wait": {"type": "bool", "required": False},
    "timeout": {"type": "int", "required": False},
    "interval": {"type": "int", "required": False},
    "name": {"type": "str", "required": True},
    "project": {"type": "str", "required": True},
    "offering": {"type": "str", "required": True},
    "description": {"type": "str", "required": False},
    "flavor": {"type": "str", "required": True},
    "image": {"type": "str", "required": True},
    "system_volume_size": {"type": "str", "required": True},
    "system_volume_type": {"type": "str", "required": False},
    "data_volume_size": {"type": "str", "required": False},
    "data_volume_type": {"type": "str", "required": False},
    "ssh_key": {"type": "str", "required": False},
    "security_groups": {"type": "str", "required": False},
    "networks": {"type": "str", "required": True},
    "user_data": {"type": "str", "required": False},
}

RUNNER_CONTEXT = {
    "resource_type": "OpenStack instance",
    "existence_check_func": openstack_instances_list,
    "existence_check_filter_keys": {
        "project": "project_uuid",
    },
    "update_func": None,
    "update_model_class": None,
    "update_check_fields": [],
    "order_create_func": marketplace_orders_create,
    "order_poll_func": marketplace_orders_retrieve,
    "terminate_func": marketplace_resources_terminate,
    "order_model_class": OrderCreateRequest,
    "terminate_model_class": ResourceTerminateRequest,
    "attribute_param_names": [
        "system_volume_type",
        "data_volume_size",
        "networks",
        "security_groups",
        "description",
        "user_data",
        "data_volume_type",
        "image",
        "system_volume_size",
        "ssh_key",
        "flavor",
    ],
    "resolvers": {
        "project": {
            "list_func": projects_list,
            "retrieve_func": projects_retrieve,
            "error_message": "Project '{value}' not found.",
        },
        "offering": {
            "list_func": marketplace_public_offerings_list,
            "retrieve_func": marketplace_public_offerings_retrieve,
            "error_message": "Offering '{value}' not found.",
        },
        "flavor": {
            "list_func": openstack_flavors_list,
            "retrieve_func": openstack_flavors_retrieve,
            "error_message": "Flavor '{value}' not found.",
        },
        "image": {
            "list_func": openstack_images_list,
            "retrieve_func": openstack_images_retrieve,
            "error_message": "Image '{value}' not found.",
        },
        "system_volume_type": {
            "list_func": openstack_volume_types_list,
            "retrieve_func": openstack_volume_types_retrieve,
            "error_message": "System_volume_type '{value}' not found.",
        },
        "data_volume_type": {
            "list_func": openstack_volume_types_list,
            "retrieve_func": openstack_volume_types_retrieve,
            "error_message": "Data_volume_type '{value}' not found.",
        },
        "ssh_key": {
            "list_func": keys_list,
            "retrieve_func": keys_retrieve,
            "error_message": "Ssh_key '{value}' not found.",
        },
    },
}


def main():
    module = AnsibleModule(
        argument_spec=ARGUMENT_SPEC,
        supports_check_mode=True,
    )
    runner = OrderRunner(module, RUNNER_CONTEXT)
    runner.run()


if __name__ == "__main__":
    main()
